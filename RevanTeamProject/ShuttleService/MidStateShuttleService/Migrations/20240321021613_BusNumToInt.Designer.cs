// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidStateShuttleService.Models;

#nullable disable

namespace MidStateShuttleService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321021613_BusNumToInt")]
    partial class BusNumToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MidStateShuttleService.Models.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<int>("BusNo")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentRouteId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int");

                    b.HasKey("BusId");

                    b.HasIndex("CurrentRouteId");

                    b.HasIndex("DriverId");

                    b.ToTable("Bus");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CheckIn", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInId"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("FirstTime")
                        .HasColumnType("bit");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CheckInId");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DriverId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex(new[] { "UserId" }, "IX_Feedback_UserID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("LocationId");

                    b.HasIndex("DropOffLocationID");

                    b.HasIndex("PickUpLocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("contactInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<bool>("responseRequired")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegisterModel", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<bool?>("AgreeTerms")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CanLeaveTime")
                        .HasColumnType("time");

                    b.Property<string>("ContactPreference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan?>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<int?>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("DropOffTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateOnly?>("FirstDayExpectingToRide")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FridayTripType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly?>("MustArriveTime")
                        .HasColumnType("time");

                    b.Property<string>("NeedTransportation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PickUpTime")
                        .HasColumnType("time");

                    b.Property<string>("ReturnSelectedRouteDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteID")
                        .HasColumnType("int");

                    b.Property<string>("SelectedDaysOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedRouteDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialDropOffLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialPickUpLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SpecialRequest")
                        .HasColumnType("bit");

                    b.Property<string>("TripType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhichFriday")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegistrationId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RouteID" }, "IX_Registration_RouteId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegistertionDaysModel", b =>
                {
                    b.Property<int>("RegistrationDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationDayID"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.HasKey("RegistrationDayID");

                    b.HasIndex(new[] { "RegistrationID" }, "IX_RegistertionDaysModel_RegistrationID");

                    b.ToTable("RegistertionDaysModels");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Routes", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("DropOffTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PickUpTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("RouteID");

                    b.HasIndex("BusId");

                    b.HasIndex(new[] { "DropOffLocationID" }, "IX_Route_DropOffLocationID");

                    b.HasIndex(new[] { "PickUpLocationID" }, "IX_Route_PickUpLocationID");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Bus", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Routes", "CurrentRoute")
                        .WithMany()
                        .HasForeignKey("CurrentRouteId");

                    b.HasOne("MidStateShuttleService.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("CurrentRoute");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CheckIn", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MidStateShuttleService.Models.Routes", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.HasOne("MidStateShuttleService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Bus");

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Feedback", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Location", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Routes", null)
                        .WithMany("DropOffLocation")
                        .HasForeignKey("DropOffLocationID");

                    b.HasOne("MidStateShuttleService.Models.Routes", null)
                        .WithMany("PickUpLocation")
                        .HasForeignKey("PickUpLocationID");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegisterModel", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Routes", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.HasOne("MidStateShuttleService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegistertionDaysModel", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.RegisterModel", "RegisterModel")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisterModel");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Routes", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Routes", b =>
                {
                    b.Navigation("DropOffLocation");

                    b.Navigation("PickUpLocation");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.User", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
