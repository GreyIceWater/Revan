// <auto-generated />
using System;
using System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidStateShuttleService.Models;

#nullable disable

namespace MidStateShuttleService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MidStateShuttleService.Models.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<int?>("BusNo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PassengerCapacity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("BusId");

                    b.HasIndex("DriverId");

                    b.ToTable("Bus", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CheckIn", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("FirstTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckInId");

                    b.HasIndex("LocationId");

                    b.ToTable("CheckIn", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CommuncateModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispatchMessageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasAnnotation("ErrorMessage", "This field must not be more than 160 characters.");

                    b.HasKey("id");

                    b.HasIndex("DropOffLocationID");

                    b.HasIndex("PickUpLocationID");

                    b.ToTable("DispatchMessage", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("EmailAddress", "Invalid Email Address");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("RegularExpression", "^\\d{10,20}$");

                    b.HasKey("DriverId");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Anonymous");

                    b.Property<DateTime>("DateSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("DisplayTestimonial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasAnnotation("ErrorMessage", "Abbreviation must contain only characters and be exactly 3 characters long.")
                        .HasAnnotation("RegularExpression", "^[A-Za-z]{3,3}$");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("ErrorMessage", "Address must contain only characters and numbers, be at least 2 characters long, and not exceed 50 characters.")
                        .HasAnnotation("RegularExpression", "^[A-Za-z0-9\\s]{2,50}$");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("ErrorMessage", "City must contain only characters, be at least 2 characters long, and not exceed 50 characters.")
                        .HasAnnotation("RegularExpression", "^[A-Za-z\\s]{2,50}$");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("ErrorMessage", "Name must contain only characters, be at least 2 characters long, and not exceed 25 characters.")
                        .HasAnnotation("RegularExpression", "^[A-Za-z\\s]{2,25}$");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasDefaultValue("WI");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasAnnotation("ErrorMessage", "Zip code must contain only numbers, be at least 5 digits long, and not exceed 10 digits.")
                        .HasAnnotation("RegularExpression", "^[0-9]{5,10}$");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("contactInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasAnnotation("ErrorMessage", "This field must not be more than 160 characters.");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasAnnotation("ErrorMessage", "Must contain only characters and be at least 2 characters long")
                        .HasAnnotation("RegularExpression", "^[A-Za-z\\s]{2,}$");

                    b.Property<bool>("responseRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("id")
                        .HasName("PK_Message");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegisterModel", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<bool>("AgreeTerms")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("CanLeaveTime")
                        .HasColumnType("time");

                    b.Property<string>("ContactPreference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("FirstDayExpectingToRide")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("ErrorMessage", "Must contain only characters and be at least 2 characters long")
                        .HasAnnotation("RegularExpression", "^[A-Za-z\\s]{2,}$");

                    b.Property<bool?>("FridayAgreeTerms")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("FridayCanLeaveTime")
                        .HasColumnType("time");

                    b.Property<int?>("FridayDropOffLocationID")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("FridayMustArriveTime")
                        .HasColumnType("time");

                    b.Property<int?>("FridayPickUpLocationID")
                        .HasColumnType("int");

                    b.Property<string>("FridayTripType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("ErrorMessage", "Must contain only characters and be at least 2 characters long")
                        .HasAnnotation("RegularExpression", "^[A-Za-z\\s]{2,}$");

                    b.Property<TimeOnly?>("MustArriveTime")
                        .HasColumnType("time");

                    b.Property<string>("NeedTransportation")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("ErrorMessage", "Must be 10 digits")
                        .HasAnnotation("RegularExpression", "^[0-9]{10}$");

                    b.Property<int?>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<string>("ReturnSelectedRouteDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedDaysOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedRouteDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialDropOffLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialPickUpLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SpecialRequest")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("TripType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WhichFriday")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("RegistrationId");

                    b.HasIndex("DropOffLocationID");

                    b.HasIndex("FridayDropOffLocationID");

                    b.HasIndex("FridayPickUpLocationID");

                    b.HasIndex("PickUpLocationID");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Routes", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<string>("AdditionalDetails")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasAnnotation("ErrorMessage", "Additional details can only contain letters, numbers, and important special characters.")
                        .HasAnnotation("RegularExpression", "^[a-zA-Z0-9.,!?'\";:@#$%^&*()_+=\\-\\/]*$");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("DropOffTime")
                        .IsRequired()
                        .HasColumnType("TIME")
                        .HasColumnName("DropOffTime")
                        .HasAnnotation("DataType", "Time")
                        .HasAnnotation("DisplayFormat", "{0:hh\\:mm tt}")
                        .HasAnnotation("ErrorMessage", "Please enter a valid time.")
                        .HasAnnotation("RegularExpression", "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")
                        .HasAnnotation("SqlDbType", SqlDbType.Time);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("PickUpTime")
                        .IsRequired()
                        .HasColumnType("TIME")
                        .HasColumnName("PickUpTime")
                        .HasAnnotation("DataType", "Time")
                        .HasAnnotation("ErrorMessage", "Please enter a valid time.")
                        .HasAnnotation("RegularExpression", "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")
                        .HasAnnotation("SqlDbType", SqlDbType.Time);

                    b.HasKey("RouteID");

                    b.HasIndex("DriverId");

                    b.HasIndex(new[] { "DropOffLocationID" }, "IX_Route_DropOffLocationID");

                    b.HasIndex(new[] { "PickUpLocationID" }, "IX_Route_PickUpLocationID");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Bus", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CheckIn", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.CommuncateModel", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("DropOffLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("PickUpLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MidStateShuttleService.Models.RegisterModel", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("DropOffLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Registration_DropOffLocation");

                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("FridayDropOffLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Registration_FridayDropOffLocation");

                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("FridayPickUpLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Registration_FridayPickUpLocation");

                    b.HasOne("MidStateShuttleService.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("PickUpLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Registration_PickUpLocation");
                });

            modelBuilder.Entity("MidStateShuttleService.Models.Routes", b =>
                {
                    b.HasOne("MidStateShuttleService.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MidStateShuttleService.Models.Location", "DropOffLocation")
                        .WithMany()
                        .HasForeignKey("DropOffLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MidStateShuttleService.Models.Location", "PickUpLocation")
                        .WithMany()
                        .HasForeignKey("PickUpLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("DropOffLocation");

                    b.Navigation("PickUpLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
